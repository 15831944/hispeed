//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace CodeCell.AgileMap.WebComponent.AgileMapServiceProxy {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MapImage", Namespace="http://schemas.datacontract.org/2004/07/CodeCell.AgileMap.MapService")]
    public partial class MapImage : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double BottomField;
        
        private double HeightField;
        
        private string ImageUrlField;
        
        private double LeftField;
        
        private double WidthField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Bottom {
            get {
                return this.BottomField;
            }
            set {
                if ((this.BottomField.Equals(value) != true)) {
                    this.BottomField = value;
                    this.RaisePropertyChanged("Bottom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageUrl {
            get {
                return this.ImageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageUrlField, value) != true)) {
                    this.ImageUrlField = value;
                    this.RaisePropertyChanged("ImageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Left {
            get {
                return this.LeftField;
            }
            set {
                if ((this.LeftField.Equals(value) != true)) {
                    this.LeftField = value;
                    this.RaisePropertyChanged("Left");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PointF", Namespace="http://schemas.datacontract.org/2004/07/System.Drawing")]
    public partial struct PointF : System.ComponentModel.INotifyPropertyChanged {
        
        private float xField;
        
        private float yField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public float x {
            get {
                return this.xField;
            }
            set {
                if ((this.xField.Equals(value) != true)) {
                    this.xField = value;
                    this.RaisePropertyChanged("x");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public float y {
            get {
                return this.yField;
            }
            set {
                if ((this.yField.Equals(value) != true)) {
                    this.yField = value;
                    this.RaisePropertyChanged("y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MapInfo", Namespace="http://schemas.datacontract.org/2004/07/CodeCell.AgileMap.MapService")]
    public partial class MapInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private string SpatialRefField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpatialRef {
            get {
                return this.SpatialRefField;
            }
            set {
                if ((object.ReferenceEquals(this.SpatialRefField, value) != true)) {
                    this.SpatialRefField = value;
                    this.RaisePropertyChanged("SpatialRef");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LayerInfo", Namespace="http://schemas.datacontract.org/2004/07/CodeCell.AgileMap.MapService")]
    public partial class LayerInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string IdField;
        
        private string NameField;
        
        private CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.enumShapeType ShapeTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.enumShapeType ShapeType {
            get {
                return this.ShapeTypeField;
            }
            set {
                if ((this.ShapeTypeField.Equals(value) != true)) {
                    this.ShapeTypeField = value;
                    this.RaisePropertyChanged("ShapeType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="enumShapeType", Namespace="http://schemas.datacontract.org/2004/07/CodeCell.AgileMap.Core")]
    public enum enumShapeType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NullShape = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Point = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Polyline = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Polygon = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MultiPoint = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PointZ = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PolylineZ = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PolygonZ = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MultiPointZ = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PointM = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PolylineM = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PolygonM = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MultiPointM = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MultiPatch = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MixGeomtry = 99,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FeatureInfo", Namespace="http://schemas.datacontract.org/2004/07/CodeCell.AgileMap.MapService")]
    public partial class FeatureInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.Envelope EnvelopeField;
        
        private int OIDField;
        
        private System.Collections.Generic.Dictionary<string, string> PropertiesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.Envelope Envelope {
            get {
                return this.EnvelopeField;
            }
            set {
                if ((object.ReferenceEquals(this.EnvelopeField, value) != true)) {
                    this.EnvelopeField = value;
                    this.RaisePropertyChanged("Envelope");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OID {
            get {
                return this.OIDField;
            }
            set {
                if ((this.OIDField.Equals(value) != true)) {
                    this.OIDField = value;
                    this.RaisePropertyChanged("OID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Envelope", Namespace="http://schemas.datacontract.org/2004/07/CodeCell.AgileMap.Core")]
    public partial class Envelope : object, System.ComponentModel.INotifyPropertyChanged {
        
        private CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.ShapePoint _centerPointField;
        
        private double _maxXField;
        
        private double _maxYField;
        
        private double _minXField;
        
        private double _minYField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.ShapePoint _centerPoint {
            get {
                return this._centerPointField;
            }
            set {
                if ((object.ReferenceEquals(this._centerPointField, value) != true)) {
                    this._centerPointField = value;
                    this.RaisePropertyChanged("_centerPoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double _maxX {
            get {
                return this._maxXField;
            }
            set {
                if ((this._maxXField.Equals(value) != true)) {
                    this._maxXField = value;
                    this.RaisePropertyChanged("_maxX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double _maxY {
            get {
                return this._maxYField;
            }
            set {
                if ((this._maxYField.Equals(value) != true)) {
                    this._maxYField = value;
                    this.RaisePropertyChanged("_maxY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double _minX {
            get {
                return this._minXField;
            }
            set {
                if ((this._minXField.Equals(value) != true)) {
                    this._minXField = value;
                    this.RaisePropertyChanged("_minX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double _minY {
            get {
                return this._minYField;
            }
            set {
                if ((this._minYField.Equals(value) != true)) {
                    this._minYField = value;
                    this.RaisePropertyChanged("_minY");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShapePoint", Namespace="http://schemas.datacontract.org/2004/07/CodeCell.AgileMap.Core")]
    public partial class ShapePoint : CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.Shape {
        
        private double _xField;
        
        private double _yField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double _x {
            get {
                return this._xField;
            }
            set {
                if ((this._xField.Equals(value) != true)) {
                    this._xField = value;
                    this.RaisePropertyChanged("_x");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double _y {
            get {
                return this._yField;
            }
            set {
                if ((this._yField.Equals(value) != true)) {
                    this._yField = value;
                    this.RaisePropertyChanged("_y");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Shape", Namespace="http://schemas.datacontract.org/2004/07/CodeCell.AgileMap.Core")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.ShapePoint))]
    public partial class Shape : object, System.ComponentModel.INotifyPropertyChanged {
        
        private CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.ShapePoint _centroidField;
        
        private CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.Envelope _envelopeField;
        
        private bool _isProjectedField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.ShapePoint _centroid {
            get {
                return this._centroidField;
            }
            set {
                if ((object.ReferenceEquals(this._centroidField, value) != true)) {
                    this._centroidField = value;
                    this.RaisePropertyChanged("_centroid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.Envelope _envelope {
            get {
                return this._envelopeField;
            }
            set {
                if ((object.ReferenceEquals(this._envelopeField, value) != true)) {
                    this._envelopeField = value;
                    this.RaisePropertyChanged("_envelope");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool _isProjected {
            get {
                return this._isProjectedField;
            }
            set {
                if ((this._isProjectedField.Equals(value) != true)) {
                    this._isProjectedField = value;
                    this.RaisePropertyChanged("_isProjected");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AgileMapServiceProxy.IMapService")]
    public interface IMapService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMapService/GetMapImage", ReplyAction="http://tempuri.org/IMapService/GetMapImageResponse")]
        System.IAsyncResult BeginGetMapImage(double x, double y, double width, double height, int targetWidth, int targetHeight, System.Collections.ObjectModel.ObservableCollection<string> invisibleLayerIds, System.AsyncCallback callback, object asyncState);
        
        CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapImage EndGetMapImage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMapService/GetMapImageByQuadkey", ReplyAction="http://tempuri.org/IMapService/GetMapImageByQuadkeyResponse")]
        System.IAsyncResult BeginGetMapImageByQuadkey(string quadkey, double x, double y, double width, double height, int targetWidth, int targetHeight, System.AsyncCallback callback, object asyncState);
        
        CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapImage EndGetMapImageByQuadkey(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMapService/GeoEnvelope2PrjEnvelope", ReplyAction="http://tempuri.org/IMapService/GeoEnvelope2PrjEnvelopeResponse")]
        System.IAsyncResult BeginGeoEnvelope2PrjEnvelope(double minX, double maxX, double minY, double maxY, System.AsyncCallback callback, object asyncState);
        
        string EndGeoEnvelope2PrjEnvelope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMapService/Geo2Prj", ReplyAction="http://tempuri.org/IMapService/Geo2PrjResponse")]
        System.IAsyncResult BeginGeo2Prj(System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> geoPts, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> EndGeo2Prj(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMapService/Prj2Geo", ReplyAction="http://tempuri.org/IMapService/Prj2GeoResponse")]
        System.IAsyncResult BeginPrj2Geo(System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> prjPts, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> EndPrj2Geo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMapService/GetMapInfo", ReplyAction="http://tempuri.org/IMapService/GetMapInfoResponse")]
        System.IAsyncResult BeginGetMapInfo(System.AsyncCallback callback, object asyncState);
        
        CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapInfo EndGetMapInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMapService/GetLayerInfos", ReplyAction="http://tempuri.org/IMapService/GetLayerInfosResponse")]
        System.IAsyncResult BeginGetLayerInfos(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.LayerInfo> EndGetLayerInfos(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMapService/Query", ReplyAction="http://tempuri.org/IMapService/QueryResponse")]
        System.IAsyncResult BeginQuery(string layerId, string geometry, string keywords, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.FeatureInfo> EndQuery(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMapService/Identify", ReplyAction="http://tempuri.org/IMapService/IdentifyResponse")]
        System.IAsyncResult BeginIdentify(System.Collections.ObjectModel.ObservableCollection<string> layerIds, CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF prjPt, double tolerance, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.FeatureInfo> EndIdentify(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMapServiceChannel : CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMapImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMapImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapImage Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapImage)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMapImageByQuadkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMapImageByQuadkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapImage Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapImage)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GeoEnvelope2PrjEnvelopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GeoEnvelope2PrjEnvelopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Geo2PrjCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Geo2PrjCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Prj2GeoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Prj2GeoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMapInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMapInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLayerInfosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLayerInfosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.LayerInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.LayerInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public QueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.FeatureInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.FeatureInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IdentifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IdentifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.FeatureInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.FeatureInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MapServiceClient : System.ServiceModel.ClientBase<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService>, CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService {
        
        private BeginOperationDelegate onBeginGetMapImageDelegate;
        
        private EndOperationDelegate onEndGetMapImageDelegate;
        
        private System.Threading.SendOrPostCallback onGetMapImageCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMapImageByQuadkeyDelegate;
        
        private EndOperationDelegate onEndGetMapImageByQuadkeyDelegate;
        
        private System.Threading.SendOrPostCallback onGetMapImageByQuadkeyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGeoEnvelope2PrjEnvelopeDelegate;
        
        private EndOperationDelegate onEndGeoEnvelope2PrjEnvelopeDelegate;
        
        private System.Threading.SendOrPostCallback onGeoEnvelope2PrjEnvelopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGeo2PrjDelegate;
        
        private EndOperationDelegate onEndGeo2PrjDelegate;
        
        private System.Threading.SendOrPostCallback onGeo2PrjCompletedDelegate;
        
        private BeginOperationDelegate onBeginPrj2GeoDelegate;
        
        private EndOperationDelegate onEndPrj2GeoDelegate;
        
        private System.Threading.SendOrPostCallback onPrj2GeoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMapInfoDelegate;
        
        private EndOperationDelegate onEndGetMapInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetMapInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLayerInfosDelegate;
        
        private EndOperationDelegate onEndGetLayerInfosDelegate;
        
        private System.Threading.SendOrPostCallback onGetLayerInfosCompletedDelegate;
        
        private BeginOperationDelegate onBeginQueryDelegate;
        
        private EndOperationDelegate onEndQueryDelegate;
        
        private System.Threading.SendOrPostCallback onQueryCompletedDelegate;
        
        private BeginOperationDelegate onBeginIdentifyDelegate;
        
        private EndOperationDelegate onEndIdentifyDelegate;
        
        private System.Threading.SendOrPostCallback onIdentifyCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MapServiceClient() {
        }
        
        public MapServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MapServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MapServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MapServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetMapImageCompletedEventArgs> GetMapImageCompleted;
        
        public event System.EventHandler<GetMapImageByQuadkeyCompletedEventArgs> GetMapImageByQuadkeyCompleted;
        
        public event System.EventHandler<GeoEnvelope2PrjEnvelopeCompletedEventArgs> GeoEnvelope2PrjEnvelopeCompleted;
        
        public event System.EventHandler<Geo2PrjCompletedEventArgs> Geo2PrjCompleted;
        
        public event System.EventHandler<Prj2GeoCompletedEventArgs> Prj2GeoCompleted;
        
        public event System.EventHandler<GetMapInfoCompletedEventArgs> GetMapInfoCompleted;
        
        public event System.EventHandler<GetLayerInfosCompletedEventArgs> GetLayerInfosCompleted;
        
        public event System.EventHandler<QueryCompletedEventArgs> QueryCompleted;
        
        public event System.EventHandler<IdentifyCompletedEventArgs> IdentifyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService.BeginGetMapImage(double x, double y, double width, double height, int targetWidth, int targetHeight, System.Collections.ObjectModel.ObservableCollection<string> invisibleLayerIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMapImage(x, y, width, height, targetWidth, targetHeight, invisibleLayerIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapImage CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService.EndGetMapImage(System.IAsyncResult result) {
            return base.Channel.EndGetMapImage(result);
        }
        
        private System.IAsyncResult OnBeginGetMapImage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double x = ((double)(inValues[0]));
            double y = ((double)(inValues[1]));
            double width = ((double)(inValues[2]));
            double height = ((double)(inValues[3]));
            int targetWidth = ((int)(inValues[4]));
            int targetHeight = ((int)(inValues[5]));
            System.Collections.ObjectModel.ObservableCollection<string> invisibleLayerIds = ((System.Collections.ObjectModel.ObservableCollection<string>)(inValues[6]));
            return ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService)(this)).BeginGetMapImage(x, y, width, height, targetWidth, targetHeight, invisibleLayerIds, callback, asyncState);
        }
        
        private object[] OnEndGetMapImage(System.IAsyncResult result) {
            CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapImage retVal = ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService)(this)).EndGetMapImage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMapImageCompleted(object state) {
            if ((this.GetMapImageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMapImageCompleted(this, new GetMapImageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMapImageAsync(double x, double y, double width, double height, int targetWidth, int targetHeight, System.Collections.ObjectModel.ObservableCollection<string> invisibleLayerIds) {
            this.GetMapImageAsync(x, y, width, height, targetWidth, targetHeight, invisibleLayerIds, null);
        }
        
        public void GetMapImageAsync(double x, double y, double width, double height, int targetWidth, int targetHeight, System.Collections.ObjectModel.ObservableCollection<string> invisibleLayerIds, object userState) {
            if ((this.onBeginGetMapImageDelegate == null)) {
                this.onBeginGetMapImageDelegate = new BeginOperationDelegate(this.OnBeginGetMapImage);
            }
            if ((this.onEndGetMapImageDelegate == null)) {
                this.onEndGetMapImageDelegate = new EndOperationDelegate(this.OnEndGetMapImage);
            }
            if ((this.onGetMapImageCompletedDelegate == null)) {
                this.onGetMapImageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMapImageCompleted);
            }
            base.InvokeAsync(this.onBeginGetMapImageDelegate, new object[] {
                        x,
                        y,
                        width,
                        height,
                        targetWidth,
                        targetHeight,
                        invisibleLayerIds}, this.onEndGetMapImageDelegate, this.onGetMapImageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService.BeginGetMapImageByQuadkey(string quadkey, double x, double y, double width, double height, int targetWidth, int targetHeight, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMapImageByQuadkey(quadkey, x, y, width, height, targetWidth, targetHeight, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapImage CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService.EndGetMapImageByQuadkey(System.IAsyncResult result) {
            return base.Channel.EndGetMapImageByQuadkey(result);
        }
        
        private System.IAsyncResult OnBeginGetMapImageByQuadkey(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string quadkey = ((string)(inValues[0]));
            double x = ((double)(inValues[1]));
            double y = ((double)(inValues[2]));
            double width = ((double)(inValues[3]));
            double height = ((double)(inValues[4]));
            int targetWidth = ((int)(inValues[5]));
            int targetHeight = ((int)(inValues[6]));
            return ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService)(this)).BeginGetMapImageByQuadkey(quadkey, x, y, width, height, targetWidth, targetHeight, callback, asyncState);
        }
        
        private object[] OnEndGetMapImageByQuadkey(System.IAsyncResult result) {
            CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapImage retVal = ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService)(this)).EndGetMapImageByQuadkey(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMapImageByQuadkeyCompleted(object state) {
            if ((this.GetMapImageByQuadkeyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMapImageByQuadkeyCompleted(this, new GetMapImageByQuadkeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMapImageByQuadkeyAsync(string quadkey, double x, double y, double width, double height, int targetWidth, int targetHeight) {
            this.GetMapImageByQuadkeyAsync(quadkey, x, y, width, height, targetWidth, targetHeight, null);
        }
        
        public void GetMapImageByQuadkeyAsync(string quadkey, double x, double y, double width, double height, int targetWidth, int targetHeight, object userState) {
            if ((this.onBeginGetMapImageByQuadkeyDelegate == null)) {
                this.onBeginGetMapImageByQuadkeyDelegate = new BeginOperationDelegate(this.OnBeginGetMapImageByQuadkey);
            }
            if ((this.onEndGetMapImageByQuadkeyDelegate == null)) {
                this.onEndGetMapImageByQuadkeyDelegate = new EndOperationDelegate(this.OnEndGetMapImageByQuadkey);
            }
            if ((this.onGetMapImageByQuadkeyCompletedDelegate == null)) {
                this.onGetMapImageByQuadkeyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMapImageByQuadkeyCompleted);
            }
            base.InvokeAsync(this.onBeginGetMapImageByQuadkeyDelegate, new object[] {
                        quadkey,
                        x,
                        y,
                        width,
                        height,
                        targetWidth,
                        targetHeight}, this.onEndGetMapImageByQuadkeyDelegate, this.onGetMapImageByQuadkeyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService.BeginGeoEnvelope2PrjEnvelope(double minX, double maxX, double minY, double maxY, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGeoEnvelope2PrjEnvelope(minX, maxX, minY, maxY, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService.EndGeoEnvelope2PrjEnvelope(System.IAsyncResult result) {
            return base.Channel.EndGeoEnvelope2PrjEnvelope(result);
        }
        
        private System.IAsyncResult OnBeginGeoEnvelope2PrjEnvelope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double minX = ((double)(inValues[0]));
            double maxX = ((double)(inValues[1]));
            double minY = ((double)(inValues[2]));
            double maxY = ((double)(inValues[3]));
            return ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService)(this)).BeginGeoEnvelope2PrjEnvelope(minX, maxX, minY, maxY, callback, asyncState);
        }
        
        private object[] OnEndGeoEnvelope2PrjEnvelope(System.IAsyncResult result) {
            string retVal = ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService)(this)).EndGeoEnvelope2PrjEnvelope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGeoEnvelope2PrjEnvelopeCompleted(object state) {
            if ((this.GeoEnvelope2PrjEnvelopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GeoEnvelope2PrjEnvelopeCompleted(this, new GeoEnvelope2PrjEnvelopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GeoEnvelope2PrjEnvelopeAsync(double minX, double maxX, double minY, double maxY) {
            this.GeoEnvelope2PrjEnvelopeAsync(minX, maxX, minY, maxY, null);
        }
        
        public void GeoEnvelope2PrjEnvelopeAsync(double minX, double maxX, double minY, double maxY, object userState) {
            if ((this.onBeginGeoEnvelope2PrjEnvelopeDelegate == null)) {
                this.onBeginGeoEnvelope2PrjEnvelopeDelegate = new BeginOperationDelegate(this.OnBeginGeoEnvelope2PrjEnvelope);
            }
            if ((this.onEndGeoEnvelope2PrjEnvelopeDelegate == null)) {
                this.onEndGeoEnvelope2PrjEnvelopeDelegate = new EndOperationDelegate(this.OnEndGeoEnvelope2PrjEnvelope);
            }
            if ((this.onGeoEnvelope2PrjEnvelopeCompletedDelegate == null)) {
                this.onGeoEnvelope2PrjEnvelopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGeoEnvelope2PrjEnvelopeCompleted);
            }
            base.InvokeAsync(this.onBeginGeoEnvelope2PrjEnvelopeDelegate, new object[] {
                        minX,
                        maxX,
                        minY,
                        maxY}, this.onEndGeoEnvelope2PrjEnvelopeDelegate, this.onGeoEnvelope2PrjEnvelopeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService.BeginGeo2Prj(System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> geoPts, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGeo2Prj(geoPts, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService.EndGeo2Prj(System.IAsyncResult result) {
            return base.Channel.EndGeo2Prj(result);
        }
        
        private System.IAsyncResult OnBeginGeo2Prj(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> geoPts = ((System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF>)(inValues[0]));
            return ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService)(this)).BeginGeo2Prj(geoPts, callback, asyncState);
        }
        
        private object[] OnEndGeo2Prj(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> retVal = ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService)(this)).EndGeo2Prj(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGeo2PrjCompleted(object state) {
            if ((this.Geo2PrjCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Geo2PrjCompleted(this, new Geo2PrjCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Geo2PrjAsync(System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> geoPts) {
            this.Geo2PrjAsync(geoPts, null);
        }
        
        public void Geo2PrjAsync(System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> geoPts, object userState) {
            if ((this.onBeginGeo2PrjDelegate == null)) {
                this.onBeginGeo2PrjDelegate = new BeginOperationDelegate(this.OnBeginGeo2Prj);
            }
            if ((this.onEndGeo2PrjDelegate == null)) {
                this.onEndGeo2PrjDelegate = new EndOperationDelegate(this.OnEndGeo2Prj);
            }
            if ((this.onGeo2PrjCompletedDelegate == null)) {
                this.onGeo2PrjCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGeo2PrjCompleted);
            }
            base.InvokeAsync(this.onBeginGeo2PrjDelegate, new object[] {
                        geoPts}, this.onEndGeo2PrjDelegate, this.onGeo2PrjCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService.BeginPrj2Geo(System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> prjPts, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPrj2Geo(prjPts, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService.EndPrj2Geo(System.IAsyncResult result) {
            return base.Channel.EndPrj2Geo(result);
        }
        
        private System.IAsyncResult OnBeginPrj2Geo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> prjPts = ((System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF>)(inValues[0]));
            return ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService)(this)).BeginPrj2Geo(prjPts, callback, asyncState);
        }
        
        private object[] OnEndPrj2Geo(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> retVal = ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService)(this)).EndPrj2Geo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPrj2GeoCompleted(object state) {
            if ((this.Prj2GeoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Prj2GeoCompleted(this, new Prj2GeoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Prj2GeoAsync(System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> prjPts) {
            this.Prj2GeoAsync(prjPts, null);
        }
        
        public void Prj2GeoAsync(System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> prjPts, object userState) {
            if ((this.onBeginPrj2GeoDelegate == null)) {
                this.onBeginPrj2GeoDelegate = new BeginOperationDelegate(this.OnBeginPrj2Geo);
            }
            if ((this.onEndPrj2GeoDelegate == null)) {
                this.onEndPrj2GeoDelegate = new EndOperationDelegate(this.OnEndPrj2Geo);
            }
            if ((this.onPrj2GeoCompletedDelegate == null)) {
                this.onPrj2GeoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPrj2GeoCompleted);
            }
            base.InvokeAsync(this.onBeginPrj2GeoDelegate, new object[] {
                        prjPts}, this.onEndPrj2GeoDelegate, this.onPrj2GeoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService.BeginGetMapInfo(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMapInfo(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapInfo CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService.EndGetMapInfo(System.IAsyncResult result) {
            return base.Channel.EndGetMapInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetMapInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService)(this)).BeginGetMapInfo(callback, asyncState);
        }
        
        private object[] OnEndGetMapInfo(System.IAsyncResult result) {
            CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapInfo retVal = ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService)(this)).EndGetMapInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMapInfoCompleted(object state) {
            if ((this.GetMapInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMapInfoCompleted(this, new GetMapInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMapInfoAsync() {
            this.GetMapInfoAsync(null);
        }
        
        public void GetMapInfoAsync(object userState) {
            if ((this.onBeginGetMapInfoDelegate == null)) {
                this.onBeginGetMapInfoDelegate = new BeginOperationDelegate(this.OnBeginGetMapInfo);
            }
            if ((this.onEndGetMapInfoDelegate == null)) {
                this.onEndGetMapInfoDelegate = new EndOperationDelegate(this.OnEndGetMapInfo);
            }
            if ((this.onGetMapInfoCompletedDelegate == null)) {
                this.onGetMapInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMapInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetMapInfoDelegate, null, this.onEndGetMapInfoDelegate, this.onGetMapInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService.BeginGetLayerInfos(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLayerInfos(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.LayerInfo> CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService.EndGetLayerInfos(System.IAsyncResult result) {
            return base.Channel.EndGetLayerInfos(result);
        }
        
        private System.IAsyncResult OnBeginGetLayerInfos(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService)(this)).BeginGetLayerInfos(callback, asyncState);
        }
        
        private object[] OnEndGetLayerInfos(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.LayerInfo> retVal = ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService)(this)).EndGetLayerInfos(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLayerInfosCompleted(object state) {
            if ((this.GetLayerInfosCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLayerInfosCompleted(this, new GetLayerInfosCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLayerInfosAsync() {
            this.GetLayerInfosAsync(null);
        }
        
        public void GetLayerInfosAsync(object userState) {
            if ((this.onBeginGetLayerInfosDelegate == null)) {
                this.onBeginGetLayerInfosDelegate = new BeginOperationDelegate(this.OnBeginGetLayerInfos);
            }
            if ((this.onEndGetLayerInfosDelegate == null)) {
                this.onEndGetLayerInfosDelegate = new EndOperationDelegate(this.OnEndGetLayerInfos);
            }
            if ((this.onGetLayerInfosCompletedDelegate == null)) {
                this.onGetLayerInfosCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLayerInfosCompleted);
            }
            base.InvokeAsync(this.onBeginGetLayerInfosDelegate, null, this.onEndGetLayerInfosDelegate, this.onGetLayerInfosCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService.BeginQuery(string layerId, string geometry, string keywords, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginQuery(layerId, geometry, keywords, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.FeatureInfo> CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService.EndQuery(System.IAsyncResult result) {
            return base.Channel.EndQuery(result);
        }
        
        private System.IAsyncResult OnBeginQuery(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string layerId = ((string)(inValues[0]));
            string geometry = ((string)(inValues[1]));
            string keywords = ((string)(inValues[2]));
            return ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService)(this)).BeginQuery(layerId, geometry, keywords, callback, asyncState);
        }
        
        private object[] OnEndQuery(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.FeatureInfo> retVal = ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService)(this)).EndQuery(result);
            return new object[] {
                    retVal};
        }
        
        private void OnQueryCompleted(object state) {
            if ((this.QueryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.QueryCompleted(this, new QueryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void QueryAsync(string layerId, string geometry, string keywords) {
            this.QueryAsync(layerId, geometry, keywords, null);
        }
        
        public void QueryAsync(string layerId, string geometry, string keywords, object userState) {
            if ((this.onBeginQueryDelegate == null)) {
                this.onBeginQueryDelegate = new BeginOperationDelegate(this.OnBeginQuery);
            }
            if ((this.onEndQueryDelegate == null)) {
                this.onEndQueryDelegate = new EndOperationDelegate(this.OnEndQuery);
            }
            if ((this.onQueryCompletedDelegate == null)) {
                this.onQueryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnQueryCompleted);
            }
            base.InvokeAsync(this.onBeginQueryDelegate, new object[] {
                        layerId,
                        geometry,
                        keywords}, this.onEndQueryDelegate, this.onQueryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService.BeginIdentify(System.Collections.ObjectModel.ObservableCollection<string> layerIds, CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF prjPt, double tolerance, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIdentify(layerIds, prjPt, tolerance, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.FeatureInfo> CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService.EndIdentify(System.IAsyncResult result) {
            return base.Channel.EndIdentify(result);
        }
        
        private System.IAsyncResult OnBeginIdentify(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<string> layerIds = ((System.Collections.ObjectModel.ObservableCollection<string>)(inValues[0]));
            CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF prjPt = ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF)(inValues[1]));
            double tolerance = ((double)(inValues[2]));
            return ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService)(this)).BeginIdentify(layerIds, prjPt, tolerance, callback, asyncState);
        }
        
        private object[] OnEndIdentify(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.FeatureInfo> retVal = ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService)(this)).EndIdentify(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIdentifyCompleted(object state) {
            if ((this.IdentifyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IdentifyCompleted(this, new IdentifyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IdentifyAsync(System.Collections.ObjectModel.ObservableCollection<string> layerIds, CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF prjPt, double tolerance) {
            this.IdentifyAsync(layerIds, prjPt, tolerance, null);
        }
        
        public void IdentifyAsync(System.Collections.ObjectModel.ObservableCollection<string> layerIds, CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF prjPt, double tolerance, object userState) {
            if ((this.onBeginIdentifyDelegate == null)) {
                this.onBeginIdentifyDelegate = new BeginOperationDelegate(this.OnBeginIdentify);
            }
            if ((this.onEndIdentifyDelegate == null)) {
                this.onEndIdentifyDelegate = new EndOperationDelegate(this.OnEndIdentify);
            }
            if ((this.onIdentifyCompletedDelegate == null)) {
                this.onIdentifyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIdentifyCompleted);
            }
            base.InvokeAsync(this.onBeginIdentifyDelegate, new object[] {
                        layerIds,
                        prjPt,
                        tolerance}, this.onEndIdentifyDelegate, this.onIdentifyCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService CreateChannel() {
            return new MapServiceClientChannel(this);
        }
        
        private class MapServiceClientChannel : ChannelBase<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService>, CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService {
            
            public MapServiceClientChannel(System.ServiceModel.ClientBase<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.IMapService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetMapImage(double x, double y, double width, double height, int targetWidth, int targetHeight, System.Collections.ObjectModel.ObservableCollection<string> invisibleLayerIds, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = x;
                _args[1] = y;
                _args[2] = width;
                _args[3] = height;
                _args[4] = targetWidth;
                _args[5] = targetHeight;
                _args[6] = invisibleLayerIds;
                System.IAsyncResult _result = base.BeginInvoke("GetMapImage", _args, callback, asyncState);
                return _result;
            }
            
            public CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapImage EndGetMapImage(System.IAsyncResult result) {
                object[] _args = new object[0];
                CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapImage _result = ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapImage)(base.EndInvoke("GetMapImage", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMapImageByQuadkey(string quadkey, double x, double y, double width, double height, int targetWidth, int targetHeight, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = quadkey;
                _args[1] = x;
                _args[2] = y;
                _args[3] = width;
                _args[4] = height;
                _args[5] = targetWidth;
                _args[6] = targetHeight;
                System.IAsyncResult _result = base.BeginInvoke("GetMapImageByQuadkey", _args, callback, asyncState);
                return _result;
            }
            
            public CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapImage EndGetMapImageByQuadkey(System.IAsyncResult result) {
                object[] _args = new object[0];
                CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapImage _result = ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapImage)(base.EndInvoke("GetMapImageByQuadkey", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGeoEnvelope2PrjEnvelope(double minX, double maxX, double minY, double maxY, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = minX;
                _args[1] = maxX;
                _args[2] = minY;
                _args[3] = maxY;
                System.IAsyncResult _result = base.BeginInvoke("GeoEnvelope2PrjEnvelope", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGeoEnvelope2PrjEnvelope(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GeoEnvelope2PrjEnvelope", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGeo2Prj(System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> geoPts, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = geoPts;
                System.IAsyncResult _result = base.BeginInvoke("Geo2Prj", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> EndGeo2Prj(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> _result = ((System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF>)(base.EndInvoke("Geo2Prj", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPrj2Geo(System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> prjPts, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = prjPts;
                System.IAsyncResult _result = base.BeginInvoke("Prj2Geo", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> EndPrj2Geo(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF> _result = ((System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF>)(base.EndInvoke("Prj2Geo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMapInfo(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetMapInfo", _args, callback, asyncState);
                return _result;
            }
            
            public CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapInfo EndGetMapInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapInfo _result = ((CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.MapInfo)(base.EndInvoke("GetMapInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLayerInfos(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetLayerInfos", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.LayerInfo> EndGetLayerInfos(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.LayerInfo> _result = ((System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.LayerInfo>)(base.EndInvoke("GetLayerInfos", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginQuery(string layerId, string geometry, string keywords, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = layerId;
                _args[1] = geometry;
                _args[2] = keywords;
                System.IAsyncResult _result = base.BeginInvoke("Query", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.FeatureInfo> EndQuery(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.FeatureInfo> _result = ((System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.FeatureInfo>)(base.EndInvoke("Query", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIdentify(System.Collections.ObjectModel.ObservableCollection<string> layerIds, CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.PointF prjPt, double tolerance, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = layerIds;
                _args[1] = prjPt;
                _args[2] = tolerance;
                System.IAsyncResult _result = base.BeginInvoke("Identify", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.FeatureInfo> EndIdentify(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.FeatureInfo> _result = ((System.Collections.ObjectModel.ObservableCollection<CodeCell.AgileMap.WebComponent.AgileMapServiceProxy.FeatureInfo>)(base.EndInvoke("Identify", _args, result)));
                return _result;
            }
        }
    }
}
